/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.assertj.core.api.Assertions;
import org.junit.Test;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import static org.assertj.core.api.Assertions.assertThat;

public class PasswordGeneratorTest {

    PasswordGenerator passwordGenerator = new PasswordGenerator();

    @Test
    public void generatesBasicPasswordOf8Characters() {

//        System.out.println(passwordGenerator.specialCharacter.toString());
//        System.out.println(passwordGenerator.numbersList.toString());
//        System.out.println(passwordGenerator.letters.toString());

        Assertions.assertThat(passwordGenerator
                .generatePassword(8, 0, 0).length())
                .isGreaterThanOrEqualTo(8);
    }

    @Test
    public void passwordContainsSpecialCharacter() {
        int counter = 0;
        String password = passwordGenerator.generatePassword(8, 2, 0);

        for (char characters : password.toCharArray()) {
            for (char specialCharacters : passwordGenerator.specialCharacter)
                if (characters == specialCharacters) {
                    counter++;
                }
        }
        System.out.println(password);
        Assertions.assertThat(counter).isEqualTo(2);
    }


    @Test
    public void passwordContainsNumber() {
        int counter = 0;
        String password = passwordGenerator.generatePassword(8, 0, 2);

        for (char characters : password.toCharArray()) {
            for (char numbers : passwordGenerator.numbersList)
                if (characters == numbers) {
                    counter++;
                }
        }
        System.out.println(password);
        Assertions.assertThat(counter).isEqualTo(2);
    }

    @Test
    public void checkSecretPassword() {

        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();
        boolean isTrue = false;
        String secretPassword = passwordGenerator.generatePassword(3, 1, 1);
//        String secretPassword = "b+1";

        while (!isTrue) {

            if (bCryptPasswordEncoder.matches(secretPassword,
                    "$2a$10$N43LdqU9b1ZMuZM2KiBnIeaXiPqxYcTEVoMFabb9ZV2jfG82jupD6")) {
                System.out.println(secretPassword);
                isTrue = true;
            } else {
                System.out.println(secretPassword);
                secretPassword = passwordGenerator.generatePassword(3, 1, 1);
            }

        }
//        passwordGenerator.findSecretPassword("$2a$10$gufewbBitAXuxqKesQD6Wu5H8SmqkvGlo1w5yBnnEN9fBgmwx9lWy");
        assertThat(bCryptPasswordEncoder.matches(secretPassword,
                "$2a$10$N43LdqU9b1ZMuZM2KiBnIeaXiPqxYcTEVoMFabb9ZV2jfG82jupD6"))
                .isTrue();
    }
}
